/**
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Upload
 */
class Upload extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.id = this.constructor.getValue(obj.id);
        this.metaMediaDirectoryId = this.constructor.getValue(obj.metaMediaDirectoryId);
        this.title = this.constructor.getValue(obj.title);
        this.alt = this.constructor.getValue(obj.alt);
        this.fileName = this.constructor.getValue(obj.fileName);
        this.passwordHash = this.constructor.getValue(obj.passwordHash);
        this.isActive = this.constructor.getValue(obj.isActive);
        this.expireOn = this.constructor.getValue(obj.expireOn);
        this.fileLibraryLabelParam = this.constructor.getValue(obj.fileLibraryLabelParam);
        this.fileSize = this.constructor.getValue(obj.fileSize);
        this.fileSizeValue = this.constructor.getValue(obj.fileSizeValue);
        this.fileUrl = this.constructor.getValue(obj.fileUrl);
        this.fileThumbnailUrl = this.constructor.getValue(obj.fileThumbnailUrl);
        this.expireOnPersianDate = this.constructor.getValue(obj.expireOnPersianDate);
        this.updateOn = this.constructor.getValue(obj.updateOn);
        this.createOn = this.constructor.getValue(obj.createOn);
        this.createOnPersianDate = this.constructor.getValue(obj.createOnPersianDate);
        this.updateOnPersianDate = this.constructor.getValue(obj.updateOnPersianDate);
        this.filePath = this.constructor.getValue(obj.filePath);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'id', realName: 'id' },
            { name: 'metaMediaDirectoryId', realName: 'metaMediaDirectoryId' },
            { name: 'title', realName: 'title' },
            { name: 'alt', realName: 'alt' },
            { name: 'fileName', realName: 'fileName' },
            { name: 'passwordHash', realName: 'passwordHash' },
            { name: 'isActive', realName: 'isActive' },
            { name: 'expireOn', realName: 'expireOn' },
            { name: 'fileLibraryLabelParam', realName: 'fileLibraryLabelParam' },
            { name: 'fileSize', realName: 'fileSize' },
            { name: 'fileSizeValue', realName: 'fileSizeValue' },
            { name: 'fileUrl', realName: 'fileUrl' },
            { name: 'fileThumbnailUrl', realName: 'fileThumbnailUrl' },
            { name: 'expireOnPersianDate', realName: 'expireOnPersianDate' },
            { name: 'updateOn', realName: 'updateOn' },
            { name: 'createOn', realName: 'createOn' },
            { name: 'createOnPersianDate', realName: 'createOnPersianDate' },
            { name: 'updateOnPersianDate', realName: 'updateOnPersianDate' },
            { name: 'filePath', realName: 'filePath' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Upload;
