/**
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of GetAccessTokenUserInfo
 */
class GetAccessTokenUserInfo extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.id = this.constructor.getValue(obj.id);
        this.accessToken = this.constructor.getValue(obj.accessToken || obj.access_token);
        this.expiresIn = this.constructor.getValue(obj.expiresIn || obj.expires_in);
        this.refreshToken = this.constructor.getValue(obj.refreshToken || obj.refresh_token);
        this.error = this.constructor.getValue(obj.error);
        this.userName = this.constructor.getValue(obj.userName);
        this.insuranceCentreName = this.constructor.getValue(obj.insuranceCentreName);
        this.insuranceCentreLogo = this.constructor.getValue(obj.insuranceCentreLogo);
        this.insuranceCentreFavicon = this.constructor.getValue(obj.insuranceCentreFavicon);
        this.licensed = this.constructor.getValue(obj.licensed);
        this.email = this.constructor.getValue(obj.email);
        this.insuranceCentreType = this.constructor.getValue(obj.insuranceCentreType);
        this.avatarUrl = this.constructor.getValue(obj.avatarUrl);
        this.aliasName = this.constructor.getValue(obj.aliasName);
        this.userGroup = this.constructor.getValue(obj.userGroup);
        this.userGroupTitle = this.constructor.getValue(obj.userGroupTitle);
        this.roleIds = this.constructor.getValue(obj.roleIds);
        this.roleTitles = this.constructor.getValue(obj.roleTitles);
        this.unlimitedAccount = this.constructor.getValue(obj.unlimitedAccount);
        this.rolePermissions = this.constructor.getValue(obj.rolePermissions);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'id', realName: 'id' },
            { name: 'accessToken', realName: 'access_token' },
            { name: 'expiresIn', realName: 'expires_in' },
            { name: 'refreshToken', realName: 'refresh_token' },
            { name: 'error', realName: 'error' },
            { name: 'userName', realName: 'userName' },
            { name: 'insuranceCentreName', realName: 'insuranceCentreName' },
            { name: 'insuranceCentreLogo', realName: 'insuranceCentreLogo' },
            { name: 'insuranceCentreFavicon', realName: 'insuranceCentreFavicon' },
            { name: 'licensed', realName: 'licensed' },
            { name: 'email', realName: 'email' },
            { name: 'insuranceCentreType', realName: 'insuranceCentreType' },
            { name: 'avatarUrl', realName: 'avatarUrl' },
            { name: 'aliasName', realName: 'aliasName' },
            { name: 'userGroup', realName: 'userGroup' },
            { name: 'userGroupTitle', realName: 'userGroupTitle' },
            { name: 'roleIds', realName: 'roleIds', array: true },
            { name: 'roleTitles', realName: 'roleTitles' },
            { name: 'unlimitedAccount', realName: 'unlimitedAccount' },
            { name: 'rolePermissions', realName: 'rolePermissions' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = GetAccessTokenUserInfo;
