/**
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Exception
 */
class Exception extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.dateTime = this.constructor.getValue(obj.dateTime);
        this.message = this.constructor.getValue(obj.message);
        this.helpLink = this.constructor.getValue(obj.helpLink);
        this.source = this.constructor.getValue(obj.source);
        this.stackTrace = this.constructor.getValue(obj.stackTrace);
        this.targetSite = this.constructor.getValue(obj.targetSite);
        this.errorLine = this.constructor.getValue(obj.errorLine);
        this.exceptionType = this.constructor.getValue(obj.exceptionType);
        this.exceptionUrl = this.constructor.getValue(obj.exceptionUrl);
        this.innerException = this.constructor.getValue(obj.innerException);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'dateTime', realName: 'dateTime' },
            { name: 'message', realName: 'message' },
            { name: 'helpLink', realName: 'helpLink' },
            { name: 'source', realName: 'source' },
            { name: 'stackTrace', realName: 'stackTrace' },
            { name: 'targetSite', realName: 'targetSite', type: 'TargetSite' },
            { name: 'errorLine', realName: 'errorLine' },
            { name: 'exceptionType', realName: 'exceptionType' },
            { name: 'exceptionUrl', realName: 'exceptionUrl' },
            { name: 'innerException', realName: 'innerException' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Exception;
